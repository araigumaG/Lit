: 2&>-
#    A simple, ShellScript HTTP server written in POSIX sh.
#           "write once, run anywhere, run for good"
#
# required: mime-make(@shellschoccarjpn)
# Original author: BRAVEMAN LONGBRIDGE, 2016
# powerd by POSIXism 
#################################################################



#################################################################
# INITIALIZATION
#################################################################

# === Initialization shell envaironment =========================
umask 0022
set -u    
unset IFS 
export LC_ALL='C'
export PATH="$(command -p getconf PATH)${PATH:+:}:${PATH:-}"

# === Define Error termination func =============================
print_usage_and_exit () { 
  cat <<-__USAGE 1>&2
	Usage : ${0##*/} [options] 
	        OPTIONS:
	        -f        
	        -p <PORT> 
	        -r '<BRE>'
	        -d <DIR>  
	Sun Mar 18 11:41:45 JST 2017
__USAGE
  exit 1 
} 

# === Comfirm existance of required command =====================
if   command -v socat  >/dev/null; then
  CMD_SOCAT='socat'                    
elif command -v nc     >/dev/null; then
  CMD_NC='nc'                          
  [ -p /tmp/servepipe ] || {           
    mkfifo /tmp/servepipe              
    PIPE='/tmp/servepipe'              
  }                                    
elif command -v netcat >/dev/null; then
  CMD_NETCAT='netcat'                  
  [ -p /tmp/servepipe ] || {           
    mkfifo /tmp/servepipe              
    PIPE='/tmp/servepipe'              
  }                                    
else                                   
  echo 'NO COMMAND' 1>&2               
  exit 1                               
fi                                     

# === Erase unnecessary pipe ====================================
trap "exit 1"          HUP INT PIPE QUIT TERM
trap "rm -f ${PIPE:-}" EXIT                  


#################################################################
# Parse Arguments
#################################################################

# === Print the usage when "--help" is put ======================
case "$# ${1:-}" in 
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac                                                     

# === Getopts ===================================================
# --- 1.Initialize
DATE=$(date +"%a, %d %b %Y %H:%M:%S %Z")
PORT=1234  
DOCROOT=~  
REGEX='/.*'
# -- 2.get opts
while getopts p:d:r:f OPT
do
  case $OPT in
    p) PORT="$OPTARG"
       POPT="-p $PORT"
       ;;
    d) DOCROOT="$OPTARG"
       DOPT="-d $DOCROOT"
       ;;
    r) REGEX="$OPTARG"
       ROPT="-r $REGEX"
       ;;
    f) PHTTPD="main"
       ;;
  esac
done
shift $(($OPTIND - 1))


#################################################################
# SUB RESPONSE
#################################################################

# === RESPONSE shell func =======================================
response(){
  STATUS=$1                                                     #
  shift                                                         #
  case "$#" in                                                  #
    0) FILE='-'                                                 #
       ;;                                                       #
    1) if [ -f "$1" ]    ||                                     #
          [ -c "$1" ]    ||                                     #
          [ -p "$1" ]    ||                                     #
          [ "_$1" = '_-' ];                                     #
       then                                                     #
         FILE=$1                                                #
         CT=$(mime-make -F "$FILE" "$FILE"                    | #
              head -n 3                                       | #
              grep -v 'Mime.*'                                | #
              grep -v 'Content-Dis.*'                         | #
              tr -d '\n\r'                                    ) #
       else                                                     #
         exit 1                                                 #
       fi                                                       #
       ;;                                                       #
    *) exit 1                                                   #
       ;;                                                       #
  esac                                                          #
  CONTENTTYPE="${CT:-}"                                         #
  TYPE=${CONTENTTYPE#*/}                                        #
  case $TYPE in                                                 #
    x-sh) CONTENTTYPE=                                          #
          FLAG=1                                                #
          [ -x "$FILE" ] || STATUS=403                          #
          ;;                                                    #
    *)    FLAG=0                                                #
          ;;                                                    #
  esac                                                          #
  cat<<-__RESPONSEHEADER                                        |
	$(printf '%s\n' "$STATUS" | awk '                       #
	BEGIN{                                                  #
	  res[200]="OK";                                        #
	  res[400]="Bad Request";                               #
	  res[403]="Forbidden";                                 #
	  res[404]="Not Found";                                 #
	  res[405]="Method Not Allowed";                        #
	  res[500]="Internal Server Error";                     #
	}                                                       #
	{ printf "HTTP/1.1 %s ", $0;                            #
	  print ($0 in res) ? res[$0] : Error;                  #
	}')
	Date: $DATE
	Expires: $DATE
	Server: Monster Maid Woman Lit
	${CONTENTTYPE:-Content-Type: text/html}
__RESPONSEHEADER
  sed '/Content-Type/ s/$/; charset="UTF-8"/'
  echo 
  if [ "$FLAG" = "1" ]; then
    [ -x "$FILE" ] && { $FILE ; } ||
    { echo "<html><body><h1>403 Forbidden</h1></body></html>"; }
  else
    cat $FILE
  fi
  exit 0
}


#################################################################
# MAIN
#################################################################
#                                                               #  
# === Main func =================================================
main(){                                                         #
#                                                               #
# === Read Request LINE =========================================
read -r LINE || {                                               #
  response 400 <<-________RESPONSE
	<html><body><h1>400 Bad Request</h1></body></html>
________RESPONSE
}                                                               #
LINE=$(echo "$LINE" | tr -d '[\r\n]')                           #
read -r REQUEST_METHOD REQUEST_URI REQUEST_HTTP_VERSION << END
$(echo $LINE)
END
[ -n "$REQUEST_METHOD" ]       &&                               \
[ -n "$REQUEST_URI" ]          &&                               \
[ -n "$REQUEST_HTTP_VERSION" ] || {                             #
  response 400 <<-________RESPONSE
	<html><body><h1>400 Bad Request</h1></body></html>
________RESPONSE
}                                                               #
#                                                               #
# === Exclude except GET method =================================
[ "$REQUEST_METHOD" = "GET" ] || {                              #
  response 405 <<-________RESPONSE
	<html><body><h1>405 Method Not Allowed</h1></body></html>
________RESPONSE
}                                                               #
#                                                               #
# === Read the rest. if necessary, leave it =====================
logfile=$(dirname $0)/log/request.log                           #
while read -r line; do                                          #
  line=$(echo "$line" | tr -d '[\r\n]')                         #
  #echo "$line" >> "$logfile"                                   #
  [ -z "$line" ] && break                                       #
done                                                            #
#                                                               #
# === Match the REQUEST_URI =====================================
{ echo "$REQUEST_URI" | grep "$REGEX" >/dev/null 2>&1; } && {   #
#                                                               #
# --- 1.sanitaize REQUEST_URI                                   #
  REQUEST_URI="${REQUEST_URI%%[!a-zA-Z0-9_~\-\.\/]*}"           #
  URL_PATH=${DOCROOT}${REQUEST_URI}                             #
  ls ${URL_PATH%/} >/dev/null 2>&1 || {                         #
    response 404 <<-________RESPONSE
	<html><body><h1>404 Not Found</h1></body></html>
________RESPONSE
  }                                                             #
#                                                               #
# --- 2.serve index file if exists in requested directory       #
  [ -d "$URL_PATH"                -a                            \
    -f "${URL_PATH}/index.html"   -a                            \
    -r "${URL_PATH}/index.html" ] &&                            \
  URL_PATH="${URL_PATH}/index.html"                             #
  if   [ -f ${URL_PATH%/} ]; then                               #
       [ -r ${URL_PATH%/} ] && {                                #
         file="${URL_PATH%/}"                                   #
         response 200 "${file}"                                 #
       } || {                                                   #
         response 403 <<-________________RESPONSE
		<html><body><h1>403 Forbidden</h1></body></html>
________________RESPONSE
       }                                                        #
  elif [ -d $URL_PATH ]; then                                   #
       [ -x $URL_PATH ] && {                                    #
         dir="${URL_PATH}"                                      #
         dir=${dir%/}                                           #
	 directory.sh "$dir" && exit 0
       } || {                                                   #
         response 403 <<-________________RESPONSE
		<html><body><h1>403 Forbidden</h1></body></html>
________________RESPONSE
       }                                                        #
  fi                                                            #
  response 500 <<-________RESPONSE                              |
      <html><body><h1>500 Internal Server Error</h1></body><html>
________RESPONSE
  sed 's/^ *//'                                                 #
} || {                                                          #
  response 400 <<-________RESPONSE
	<html><body><h1>400 Bad Request</h1></body></html>
________RESPONSE
  }                                                             #
}                                                               #
#                                                               #
# === -f:filter operation for debug =============================
${PHTTPD:-}                                                     #
#                                                               #
# === Run as a web server =======================================
if [ -n "${CMD_SOCAT:-}" ]; then                                #
  socat TCP-LISTEN:${PORT},fork EXEC:"${0} -f                   \
  ${DOPT:-} ${ROPT:-}" 2>/dev/null                              #
else                                                            #
 while :                                                        #
  do                                                            #
    cat "$PIPE"                                         |       #
    ${CMD_NC:-}${CMD_NETCAT:-} -l ${PORT}               |       #
    main 1>"$PIPE"                                      #       #
    [ $? != 0 ] && break                                #       #
  done                                                          #
fi                                                              #
